#! /usr/bin/python

import socket
import select

LISTEN_PORT = 6600
TARGET_PORT = 6601

dispatchers = {}
buffers = {}

def main():
    setup_listener()
    
    while True:
        socks = dispatchers.keys()
        read, write, error = select.select(socks, socks, [])
        for sock in read:
            dispatchers[sock]()
        for sock in write:
            send(sock)

def setup_listener():
    listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listener.setblocking(0)
    listener.bind(('', LISTEN_PORT))
    listener.listen(1)

    dispatchers[listener] = lambda: handle_listener(listener)

def create_connection():
    connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connection.connect(('', TARGET_PORT))
    return connection

def handle_listener(sock): 
    client, addr = sock.accept()
    server = create_connection()

    buffers[client] = ''
    buffers[server] = ''
    dispatchers[client] = lambda: handle_proxy(client, server)
    dispatchers[server] = lambda: handle_proxy(server, client)

def handle_proxy(source, dest):
    try:
        data = source.recv(8192)
    except socket.error, e:
        data = ''

    if len(data):
        print data,
        buffers[dest] = data
    else:
        cleanup(source)
        cleanup(dest)

def cleanup(sock):
    sock.close()
    del dispatchers[sock]
    del buffers[sock]

def send(sock):
    if sock not in buffers:
        return

    transmited = sock.send(buffers[sock])
    buffers[sock] = buffers[sock][transmited:]

if __name__ == '__main__':
    main()
